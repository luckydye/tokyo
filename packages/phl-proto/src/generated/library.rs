// This file is generated by rust-protobuf 3.2.0. Do not edit
// .proto file is parsed by protoc --rust-out=...
// @generated

// https://github.com/rust-lang/rust-clippy/issues/702
#![allow(unknown_lints)]
#![allow(clippy::all)]

#![allow(unused_attributes)]
#![cfg_attr(rustfmt, rustfmt::skip)]

#![allow(box_pointers)]
#![allow(dead_code)]
#![allow(missing_docs)]
#![allow(non_camel_case_types)]
#![allow(non_snake_case)]
#![allow(non_upper_case_globals)]
#![allow(trivial_casts)]
#![allow(unused_results)]
#![allow(unused_mut)]

//! Generated file from `library.proto`

/// Generated files are compatible only with the same version
/// of protobuf runtime.
const _PROTOBUF_VERSION_CHECK: () = ::protobuf::VERSION_3_2_0;

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.LibraryMessage)
pub struct LibraryMessage {
    // message fields
    // @@protoc_insertion_point(field:proto.LibraryMessage.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:proto.LibraryMessage.path)
    pub path: ::std::string::String,
    // special fields
    // @@protoc_insertion_point(special_field:proto.LibraryMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LibraryMessage {
    fn default() -> &'a LibraryMessage {
        <LibraryMessage as ::protobuf::Message>::default_instance()
    }
}

impl LibraryMessage {
    pub fn new() -> LibraryMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &LibraryMessage| { &m.name },
            |m: &mut LibraryMessage| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "path",
            |m: &LibraryMessage| { &m.path },
            |m: &mut LibraryMessage| { &mut m.path },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LibraryMessage>(
            "LibraryMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LibraryMessage {
    const NAME: &'static str = "LibraryMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.name = is.read_string()?;
                },
                18 => {
                    self.path = is.read_string()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.name);
        }
        if !self.path.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.path);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.name.is_empty() {
            os.write_string(1, &self.name)?;
        }
        if !self.path.is_empty() {
            os.write_string(2, &self.path)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LibraryMessage {
        LibraryMessage::new()
    }

    fn clear(&mut self) {
        self.name.clear();
        self.path.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LibraryMessage {
        static instance: LibraryMessage = LibraryMessage {
            name: ::std::string::String::new(),
            path: ::std::string::String::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LibraryMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LibraryMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LibraryMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LibraryMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.LibraryListMessage)
pub struct LibraryListMessage {
    // message fields
    // @@protoc_insertion_point(field:proto.LibraryListMessage.libraries)
    pub libraries: ::std::vec::Vec<LibraryMessage>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.LibraryListMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LibraryListMessage {
    fn default() -> &'a LibraryListMessage {
        <LibraryListMessage as ::protobuf::Message>::default_instance()
    }
}

impl LibraryListMessage {
    pub fn new() -> LibraryListMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "libraries",
            |m: &LibraryListMessage| { &m.libraries },
            |m: &mut LibraryListMessage| { &mut m.libraries },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LibraryListMessage>(
            "LibraryListMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LibraryListMessage {
    const NAME: &'static str = "LibraryListMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.libraries.push(is.read_message()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.libraries {
            let len = value.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.libraries {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LibraryListMessage {
        LibraryListMessage::new()
    }

    fn clear(&mut self) {
        self.libraries.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LibraryListMessage {
        static instance: LibraryListMessage = LibraryListMessage {
            libraries: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LibraryListMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LibraryListMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LibraryListMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LibraryListMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.LibraryIndexMessage)
pub struct LibraryIndexMessage {
    // message fields
    // @@protoc_insertion_point(field:proto.LibraryIndexMessage.index)
    pub index: ::std::vec::Vec<::std::string::String>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.LibraryIndexMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a LibraryIndexMessage {
    fn default() -> &'a LibraryIndexMessage {
        <LibraryIndexMessage as ::protobuf::Message>::default_instance()
    }
}

impl LibraryIndexMessage {
    pub fn new() -> LibraryIndexMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(1);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_vec_simpler_accessor::<_, _>(
            "index",
            |m: &LibraryIndexMessage| { &m.index },
            |m: &mut LibraryIndexMessage| { &mut m.index },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<LibraryIndexMessage>(
            "LibraryIndexMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for LibraryIndexMessage {
    const NAME: &'static str = "LibraryIndexMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.index.push(is.read_string()?);
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        for value in &self.index {
            my_size += ::protobuf::rt::string_size(1, &value);
        };
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        for v in &self.index {
            os.write_string(1, &v)?;
        };
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> LibraryIndexMessage {
        LibraryIndexMessage::new()
    }

    fn clear(&mut self) {
        self.index.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static LibraryIndexMessage {
        static instance: LibraryIndexMessage = LibraryIndexMessage {
            index: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for LibraryIndexMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("LibraryIndexMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for LibraryIndexMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for LibraryIndexMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.MetadataMessage)
pub struct MetadataMessage {
    // message fields
    // @@protoc_insertion_point(field:proto.MetadataMessage.hash)
    pub hash: ::std::string::String,
    // @@protoc_insertion_point(field:proto.MetadataMessage.name)
    pub name: ::std::string::String,
    // @@protoc_insertion_point(field:proto.MetadataMessage.create_date)
    pub create_date: ::std::string::String,
    // @@protoc_insertion_point(field:proto.MetadataMessage.rating)
    pub rating: i32,
    // @@protoc_insertion_point(field:proto.MetadataMessage.width)
    pub width: i32,
    // @@protoc_insertion_point(field:proto.MetadataMessage.height)
    pub height: i32,
    // @@protoc_insertion_point(field:proto.MetadataMessage.make)
    pub make: ::std::string::String,
    // @@protoc_insertion_point(field:proto.MetadataMessage.exif)
    pub exif: ::std::string::String,
    // @@protoc_insertion_point(field:proto.MetadataMessage.orientation)
    pub orientation: i32,
    // special fields
    // @@protoc_insertion_point(special_field:proto.MetadataMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a MetadataMessage {
    fn default() -> &'a MetadataMessage {
        <MetadataMessage as ::protobuf::Message>::default_instance()
    }
}

impl MetadataMessage {
    pub fn new() -> MetadataMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(9);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "hash",
            |m: &MetadataMessage| { &m.hash },
            |m: &mut MetadataMessage| { &mut m.hash },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "name",
            |m: &MetadataMessage| { &m.name },
            |m: &mut MetadataMessage| { &mut m.name },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "create_date",
            |m: &MetadataMessage| { &m.create_date },
            |m: &mut MetadataMessage| { &mut m.create_date },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "rating",
            |m: &MetadataMessage| { &m.rating },
            |m: &mut MetadataMessage| { &mut m.rating },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "width",
            |m: &MetadataMessage| { &m.width },
            |m: &mut MetadataMessage| { &mut m.width },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "height",
            |m: &MetadataMessage| { &m.height },
            |m: &mut MetadataMessage| { &mut m.height },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "make",
            |m: &MetadataMessage| { &m.make },
            |m: &mut MetadataMessage| { &mut m.make },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "exif",
            |m: &MetadataMessage| { &m.exif },
            |m: &mut MetadataMessage| { &mut m.exif },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "orientation",
            |m: &MetadataMessage| { &m.orientation },
            |m: &mut MetadataMessage| { &mut m.orientation },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<MetadataMessage>(
            "MetadataMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for MetadataMessage {
    const NAME: &'static str = "MetadataMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    self.hash = is.read_string()?;
                },
                18 => {
                    self.name = is.read_string()?;
                },
                26 => {
                    self.create_date = is.read_string()?;
                },
                32 => {
                    self.rating = is.read_int32()?;
                },
                40 => {
                    self.width = is.read_int32()?;
                },
                48 => {
                    self.height = is.read_int32()?;
                },
                58 => {
                    self.make = is.read_string()?;
                },
                66 => {
                    self.exif = is.read_string()?;
                },
                72 => {
                    self.orientation = is.read_int32()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if !self.hash.is_empty() {
            my_size += ::protobuf::rt::string_size(1, &self.hash);
        }
        if !self.name.is_empty() {
            my_size += ::protobuf::rt::string_size(2, &self.name);
        }
        if !self.create_date.is_empty() {
            my_size += ::protobuf::rt::string_size(3, &self.create_date);
        }
        if self.rating != 0 {
            my_size += ::protobuf::rt::int32_size(4, self.rating);
        }
        if self.width != 0 {
            my_size += ::protobuf::rt::int32_size(5, self.width);
        }
        if self.height != 0 {
            my_size += ::protobuf::rt::int32_size(6, self.height);
        }
        if !self.make.is_empty() {
            my_size += ::protobuf::rt::string_size(7, &self.make);
        }
        if !self.exif.is_empty() {
            my_size += ::protobuf::rt::string_size(8, &self.exif);
        }
        if self.orientation != 0 {
            my_size += ::protobuf::rt::int32_size(9, self.orientation);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if !self.hash.is_empty() {
            os.write_string(1, &self.hash)?;
        }
        if !self.name.is_empty() {
            os.write_string(2, &self.name)?;
        }
        if !self.create_date.is_empty() {
            os.write_string(3, &self.create_date)?;
        }
        if self.rating != 0 {
            os.write_int32(4, self.rating)?;
        }
        if self.width != 0 {
            os.write_int32(5, self.width)?;
        }
        if self.height != 0 {
            os.write_int32(6, self.height)?;
        }
        if !self.make.is_empty() {
            os.write_string(7, &self.make)?;
        }
        if !self.exif.is_empty() {
            os.write_string(8, &self.exif)?;
        }
        if self.orientation != 0 {
            os.write_int32(9, self.orientation)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> MetadataMessage {
        MetadataMessage::new()
    }

    fn clear(&mut self) {
        self.hash.clear();
        self.name.clear();
        self.create_date.clear();
        self.rating = 0;
        self.width = 0;
        self.height = 0;
        self.make.clear();
        self.exif.clear();
        self.orientation = 0;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static MetadataMessage {
        static instance: MetadataMessage = MetadataMessage {
            hash: ::std::string::String::new(),
            name: ::std::string::String::new(),
            create_date: ::std::string::String::new(),
            rating: 0,
            width: 0,
            height: 0,
            make: ::std::string::String::new(),
            exif: ::std::string::String::new(),
            orientation: 0,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for MetadataMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("MetadataMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for MetadataMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for MetadataMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ImageMessage)
pub struct ImageMessage {
    // message fields
    // @@protoc_insertion_point(field:proto.ImageMessage.metadata)
    pub metadata: ::protobuf::MessageField<MetadataMessage>,
    // @@protoc_insertion_point(field:proto.ImageMessage.image)
    pub image: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.ImageMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ImageMessage {
    fn default() -> &'a ImageMessage {
        <ImageMessage as ::protobuf::Message>::default_instance()
    }
}

impl ImageMessage {
    pub fn new() -> ImageMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetadataMessage>(
            "metadata",
            |m: &ImageMessage| { &m.metadata },
            |m: &mut ImageMessage| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image",
            |m: &ImageMessage| { &m.image },
            |m: &mut ImageMessage| { &mut m.image },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ImageMessage>(
            "ImageMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ImageMessage {
    const NAME: &'static str = "ImageMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.image = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.image.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.image);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.image.is_empty() {
            os.write_bytes(2, &self.image)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ImageMessage {
        ImageMessage::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.image.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ImageMessage {
        static instance: ImageMessage = ImageMessage {
            metadata: ::protobuf::MessageField::none(),
            image: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ImageMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ImageMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ImageMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ImageMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.ThumbnailMessage)
pub struct ThumbnailMessage {
    // message fields
    // @@protoc_insertion_point(field:proto.ThumbnailMessage.metadata)
    pub metadata: ::protobuf::MessageField<MetadataMessage>,
    // @@protoc_insertion_point(field:proto.ThumbnailMessage.image)
    pub image: ::std::vec::Vec<u8>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.ThumbnailMessage.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a ThumbnailMessage {
    fn default() -> &'a ThumbnailMessage {
        <ThumbnailMessage as ::protobuf::Message>::default_instance()
    }
}

impl ThumbnailMessage {
    pub fn new() -> ThumbnailMessage {
        ::std::default::Default::default()
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(2);
        let mut oneofs = ::std::vec::Vec::with_capacity(0);
        fields.push(::protobuf::reflect::rt::v2::make_message_field_accessor::<_, MetadataMessage>(
            "metadata",
            |m: &ThumbnailMessage| { &m.metadata },
            |m: &mut ThumbnailMessage| { &mut m.metadata },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_simpler_field_accessor::<_, _>(
            "image",
            |m: &ThumbnailMessage| { &m.image },
            |m: &mut ThumbnailMessage| { &mut m.image },
        ));
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<ThumbnailMessage>(
            "ThumbnailMessage",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for ThumbnailMessage {
    const NAME: &'static str = "ThumbnailMessage";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                10 => {
                    ::protobuf::rt::read_singular_message_into_field(is, &mut self.metadata)?;
                },
                18 => {
                    self.image = is.read_bytes()?;
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.metadata.as_ref() {
            let len = v.compute_size();
            my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
        }
        if !self.image.is_empty() {
            my_size += ::protobuf::rt::bytes_size(2, &self.image);
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.metadata.as_ref() {
            ::protobuf::rt::write_message_field_with_cached_size(1, v, os)?;
        }
        if !self.image.is_empty() {
            os.write_bytes(2, &self.image)?;
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> ThumbnailMessage {
        ThumbnailMessage::new()
    }

    fn clear(&mut self) {
        self.metadata.clear();
        self.image.clear();
        self.special_fields.clear();
    }

    fn default_instance() -> &'static ThumbnailMessage {
        static instance: ThumbnailMessage = ThumbnailMessage {
            metadata: ::protobuf::MessageField::none(),
            image: ::std::vec::Vec::new(),
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for ThumbnailMessage {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("ThumbnailMessage").unwrap()).clone()
    }
}

impl ::std::fmt::Display for ThumbnailMessage {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for ThumbnailMessage {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

#[derive(PartialEq,Clone,Default,Debug)]
// @@protoc_insertion_point(message:proto.Message)
pub struct Message {
    // message fields
    // @@protoc_insertion_point(field:proto.Message.id)
    pub id: ::std::option::Option<i32>,
    // @@protoc_insertion_point(field:proto.Message.message)
    pub message: ::std::option::Option<::std::string::String>,
    // @@protoc_insertion_point(field:proto.Message.error)
    pub error: ::std::option::Option<bool>,
    // message oneof groups
    pub msg: ::std::option::Option<message::Msg>,
    // special fields
    // @@protoc_insertion_point(special_field:proto.Message.special_fields)
    pub special_fields: ::protobuf::SpecialFields,
}

impl<'a> ::std::default::Default for &'a Message {
    fn default() -> &'a Message {
        <Message as ::protobuf::Message>::default_instance()
    }
}

impl Message {
    pub fn new() -> Message {
        ::std::default::Default::default()
    }

    // .proto.LibraryListMessage list = 5;

    pub fn list(&self) -> &LibraryListMessage {
        match self.msg {
            ::std::option::Option::Some(message::Msg::List(ref v)) => v,
            _ => <LibraryListMessage as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_list(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_list(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(message::Msg::List(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_list(&mut self, v: LibraryListMessage) {
        self.msg = ::std::option::Option::Some(message::Msg::List(v))
    }

    // Mutable pointer to the field.
    pub fn mut_list(&mut self) -> &mut LibraryListMessage {
        if let ::std::option::Option::Some(message::Msg::List(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(message::Msg::List(LibraryListMessage::new()));
        }
        match self.msg {
            ::std::option::Option::Some(message::Msg::List(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_list(&mut self) -> LibraryListMessage {
        if self.has_list() {
            match self.msg.take() {
                ::std::option::Option::Some(message::Msg::List(v)) => v,
                _ => panic!(),
            }
        } else {
            LibraryListMessage::new()
        }
    }

    // .proto.LibraryIndexMessage index = 6;

    pub fn index(&self) -> &LibraryIndexMessage {
        match self.msg {
            ::std::option::Option::Some(message::Msg::Index(ref v)) => v,
            _ => <LibraryIndexMessage as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_index(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_index(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(message::Msg::Index(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_index(&mut self, v: LibraryIndexMessage) {
        self.msg = ::std::option::Option::Some(message::Msg::Index(v))
    }

    // Mutable pointer to the field.
    pub fn mut_index(&mut self) -> &mut LibraryIndexMessage {
        if let ::std::option::Option::Some(message::Msg::Index(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(message::Msg::Index(LibraryIndexMessage::new()));
        }
        match self.msg {
            ::std::option::Option::Some(message::Msg::Index(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_index(&mut self) -> LibraryIndexMessage {
        if self.has_index() {
            match self.msg.take() {
                ::std::option::Option::Some(message::Msg::Index(v)) => v,
                _ => panic!(),
            }
        } else {
            LibraryIndexMessage::new()
        }
    }

    // .proto.MetadataMessage metadata = 7;

    pub fn metadata(&self) -> &MetadataMessage {
        match self.msg {
            ::std::option::Option::Some(message::Msg::Metadata(ref v)) => v,
            _ => <MetadataMessage as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_metadata(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_metadata(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(message::Msg::Metadata(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_metadata(&mut self, v: MetadataMessage) {
        self.msg = ::std::option::Option::Some(message::Msg::Metadata(v))
    }

    // Mutable pointer to the field.
    pub fn mut_metadata(&mut self) -> &mut MetadataMessage {
        if let ::std::option::Option::Some(message::Msg::Metadata(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(message::Msg::Metadata(MetadataMessage::new()));
        }
        match self.msg {
            ::std::option::Option::Some(message::Msg::Metadata(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_metadata(&mut self) -> MetadataMessage {
        if self.has_metadata() {
            match self.msg.take() {
                ::std::option::Option::Some(message::Msg::Metadata(v)) => v,
                _ => panic!(),
            }
        } else {
            MetadataMessage::new()
        }
    }

    // .proto.ImageMessage image = 8;

    pub fn image(&self) -> &ImageMessage {
        match self.msg {
            ::std::option::Option::Some(message::Msg::Image(ref v)) => v,
            _ => <ImageMessage as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_image(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_image(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(message::Msg::Image(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_image(&mut self, v: ImageMessage) {
        self.msg = ::std::option::Option::Some(message::Msg::Image(v))
    }

    // Mutable pointer to the field.
    pub fn mut_image(&mut self) -> &mut ImageMessage {
        if let ::std::option::Option::Some(message::Msg::Image(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(message::Msg::Image(ImageMessage::new()));
        }
        match self.msg {
            ::std::option::Option::Some(message::Msg::Image(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_image(&mut self) -> ImageMessage {
        if self.has_image() {
            match self.msg.take() {
                ::std::option::Option::Some(message::Msg::Image(v)) => v,
                _ => panic!(),
            }
        } else {
            ImageMessage::new()
        }
    }

    // .proto.ThumbnailMessage thumbnail = 9;

    pub fn thumbnail(&self) -> &ThumbnailMessage {
        match self.msg {
            ::std::option::Option::Some(message::Msg::Thumbnail(ref v)) => v,
            _ => <ThumbnailMessage as ::protobuf::Message>::default_instance(),
        }
    }

    pub fn clear_thumbnail(&mut self) {
        self.msg = ::std::option::Option::None;
    }

    pub fn has_thumbnail(&self) -> bool {
        match self.msg {
            ::std::option::Option::Some(message::Msg::Thumbnail(..)) => true,
            _ => false,
        }
    }

    // Param is passed by value, moved
    pub fn set_thumbnail(&mut self, v: ThumbnailMessage) {
        self.msg = ::std::option::Option::Some(message::Msg::Thumbnail(v))
    }

    // Mutable pointer to the field.
    pub fn mut_thumbnail(&mut self) -> &mut ThumbnailMessage {
        if let ::std::option::Option::Some(message::Msg::Thumbnail(_)) = self.msg {
        } else {
            self.msg = ::std::option::Option::Some(message::Msg::Thumbnail(ThumbnailMessage::new()));
        }
        match self.msg {
            ::std::option::Option::Some(message::Msg::Thumbnail(ref mut v)) => v,
            _ => panic!(),
        }
    }

    // Take field
    pub fn take_thumbnail(&mut self) -> ThumbnailMessage {
        if self.has_thumbnail() {
            match self.msg.take() {
                ::std::option::Option::Some(message::Msg::Thumbnail(v)) => v,
                _ => panic!(),
            }
        } else {
            ThumbnailMessage::new()
        }
    }

    fn generated_message_descriptor_data() -> ::protobuf::reflect::GeneratedMessageDescriptorData {
        let mut fields = ::std::vec::Vec::with_capacity(8);
        let mut oneofs = ::std::vec::Vec::with_capacity(1);
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "id",
            |m: &Message| { &m.id },
            |m: &mut Message| { &mut m.id },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "message",
            |m: &Message| { &m.message },
            |m: &mut Message| { &mut m.message },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_option_accessor::<_, _>(
            "error",
            |m: &Message| { &m.error },
            |m: &mut Message| { &mut m.error },
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LibraryListMessage>(
            "list",
            Message::has_list,
            Message::list,
            Message::mut_list,
            Message::set_list,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, LibraryIndexMessage>(
            "index",
            Message::has_index,
            Message::index,
            Message::mut_index,
            Message::set_index,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, MetadataMessage>(
            "metadata",
            Message::has_metadata,
            Message::metadata,
            Message::mut_metadata,
            Message::set_metadata,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ImageMessage>(
            "image",
            Message::has_image,
            Message::image,
            Message::mut_image,
            Message::set_image,
        ));
        fields.push(::protobuf::reflect::rt::v2::make_oneof_message_has_get_mut_set_accessor::<_, ThumbnailMessage>(
            "thumbnail",
            Message::has_thumbnail,
            Message::thumbnail,
            Message::mut_thumbnail,
            Message::set_thumbnail,
        ));
        oneofs.push(message::Msg::generated_oneof_descriptor_data());
        ::protobuf::reflect::GeneratedMessageDescriptorData::new_2::<Message>(
            "Message",
            fields,
            oneofs,
        )
    }
}

impl ::protobuf::Message for Message {
    const NAME: &'static str = "Message";

    fn is_initialized(&self) -> bool {
        true
    }

    fn merge_from(&mut self, is: &mut ::protobuf::CodedInputStream<'_>) -> ::protobuf::Result<()> {
        while let Some(tag) = is.read_raw_tag_or_eof()? {
            match tag {
                8 => {
                    self.id = ::std::option::Option::Some(is.read_int32()?);
                },
                18 => {
                    self.message = ::std::option::Option::Some(is.read_string()?);
                },
                24 => {
                    self.error = ::std::option::Option::Some(is.read_bool()?);
                },
                42 => {
                    self.msg = ::std::option::Option::Some(message::Msg::List(is.read_message()?));
                },
                50 => {
                    self.msg = ::std::option::Option::Some(message::Msg::Index(is.read_message()?));
                },
                58 => {
                    self.msg = ::std::option::Option::Some(message::Msg::Metadata(is.read_message()?));
                },
                66 => {
                    self.msg = ::std::option::Option::Some(message::Msg::Image(is.read_message()?));
                },
                74 => {
                    self.msg = ::std::option::Option::Some(message::Msg::Thumbnail(is.read_message()?));
                },
                tag => {
                    ::protobuf::rt::read_unknown_or_skip_group(tag, is, self.special_fields.mut_unknown_fields())?;
                },
            };
        }
        ::std::result::Result::Ok(())
    }

    // Compute sizes of nested messages
    #[allow(unused_variables)]
    fn compute_size(&self) -> u64 {
        let mut my_size = 0;
        if let Some(v) = self.id {
            my_size += ::protobuf::rt::int32_size(1, v);
        }
        if let Some(v) = self.message.as_ref() {
            my_size += ::protobuf::rt::string_size(2, &v);
        }
        if let Some(v) = self.error {
            my_size += 1 + 1;
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &message::Msg::List(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &message::Msg::Index(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &message::Msg::Metadata(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &message::Msg::Image(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
                &message::Msg::Thumbnail(ref v) => {
                    let len = v.compute_size();
                    my_size += 1 + ::protobuf::rt::compute_raw_varint64_size(len) + len;
                },
            };
        }
        my_size += ::protobuf::rt::unknown_fields_size(self.special_fields.unknown_fields());
        self.special_fields.cached_size().set(my_size as u32);
        my_size
    }

    fn write_to_with_cached_sizes(&self, os: &mut ::protobuf::CodedOutputStream<'_>) -> ::protobuf::Result<()> {
        if let Some(v) = self.id {
            os.write_int32(1, v)?;
        }
        if let Some(v) = self.message.as_ref() {
            os.write_string(2, v)?;
        }
        if let Some(v) = self.error {
            os.write_bool(3, v)?;
        }
        if let ::std::option::Option::Some(ref v) = self.msg {
            match v {
                &message::Msg::List(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(5, v, os)?;
                },
                &message::Msg::Index(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(6, v, os)?;
                },
                &message::Msg::Metadata(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(7, v, os)?;
                },
                &message::Msg::Image(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(8, v, os)?;
                },
                &message::Msg::Thumbnail(ref v) => {
                    ::protobuf::rt::write_message_field_with_cached_size(9, v, os)?;
                },
            };
        }
        os.write_unknown_fields(self.special_fields.unknown_fields())?;
        ::std::result::Result::Ok(())
    }

    fn special_fields(&self) -> &::protobuf::SpecialFields {
        &self.special_fields
    }

    fn mut_special_fields(&mut self) -> &mut ::protobuf::SpecialFields {
        &mut self.special_fields
    }

    fn new() -> Message {
        Message::new()
    }

    fn clear(&mut self) {
        self.id = ::std::option::Option::None;
        self.message = ::std::option::Option::None;
        self.error = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.msg = ::std::option::Option::None;
        self.special_fields.clear();
    }

    fn default_instance() -> &'static Message {
        static instance: Message = Message {
            id: ::std::option::Option::None,
            message: ::std::option::Option::None,
            error: ::std::option::Option::None,
            msg: ::std::option::Option::None,
            special_fields: ::protobuf::SpecialFields::new(),
        };
        &instance
    }
}

impl ::protobuf::MessageFull for Message {
    fn descriptor() -> ::protobuf::reflect::MessageDescriptor {
        static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::MessageDescriptor> = ::protobuf::rt::Lazy::new();
        descriptor.get(|| file_descriptor().message_by_package_relative_name("Message").unwrap()).clone()
    }
}

impl ::std::fmt::Display for Message {
    fn fmt(&self, f: &mut ::std::fmt::Formatter<'_>) -> ::std::fmt::Result {
        ::protobuf::text_format::fmt(self, f)
    }
}

impl ::protobuf::reflect::ProtobufValue for Message {
    type RuntimeType = ::protobuf::reflect::rt::RuntimeTypeMessage<Self>;
}

/// Nested message and enums of message `Message`
pub mod message {

    #[derive(Clone,PartialEq,Debug)]
    #[non_exhaustive]
    // @@protoc_insertion_point(oneof:proto.Message.msg)
    pub enum Msg {
        // @@protoc_insertion_point(oneof_field:proto.Message.list)
        List(super::LibraryListMessage),
        // @@protoc_insertion_point(oneof_field:proto.Message.index)
        Index(super::LibraryIndexMessage),
        // @@protoc_insertion_point(oneof_field:proto.Message.metadata)
        Metadata(super::MetadataMessage),
        // @@protoc_insertion_point(oneof_field:proto.Message.image)
        Image(super::ImageMessage),
        // @@protoc_insertion_point(oneof_field:proto.Message.thumbnail)
        Thumbnail(super::ThumbnailMessage),
    }

    impl ::protobuf::Oneof for Msg {
    }

    impl ::protobuf::OneofFull for Msg {
        fn descriptor() -> ::protobuf::reflect::OneofDescriptor {
            static descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::OneofDescriptor> = ::protobuf::rt::Lazy::new();
            descriptor.get(|| <super::Message as ::protobuf::MessageFull>::descriptor().oneof_by_name("msg").unwrap()).clone()
        }
    }

    impl Msg {
        pub(in super) fn generated_oneof_descriptor_data() -> ::protobuf::reflect::GeneratedOneofDescriptorData {
            ::protobuf::reflect::GeneratedOneofDescriptorData::new::<Msg>("msg")
        }
    }
}

static file_descriptor_proto_data: &'static [u8] = b"\
    \n\rlibrary.proto\x12\x05proto\"8\n\x0eLibraryMessage\x12\x12\n\x04name\
    \x18\x01\x20\x01(\tR\x04name\x12\x12\n\x04path\x18\x02\x20\x01(\tR\x04pa\
    th\"I\n\x12LibraryListMessage\x123\n\tlibraries\x18\x01\x20\x03(\x0b2\
    \x15.proto.LibraryMessageR\tlibraries\"+\n\x13LibraryIndexMessage\x12\
    \x14\n\x05index\x18\x01\x20\x03(\tR\x05index\"\xea\x01\n\x0fMetadataMess\
    age\x12\x12\n\x04hash\x18\x01\x20\x01(\tR\x04hash\x12\x12\n\x04name\x18\
    \x02\x20\x01(\tR\x04name\x12\x1f\n\x0bcreate_date\x18\x03\x20\x01(\tR\nc\
    reateDate\x12\x16\n\x06rating\x18\x04\x20\x01(\x05R\x06rating\x12\x14\n\
    \x05width\x18\x05\x20\x01(\x05R\x05width\x12\x16\n\x06height\x18\x06\x20\
    \x01(\x05R\x06height\x12\x12\n\x04make\x18\x07\x20\x01(\tR\x04make\x12\
    \x12\n\x04exif\x18\x08\x20\x01(\tR\x04exif\x12\x20\n\x0borientation\x18\
    \t\x20\x01(\x05R\x0borientation\"X\n\x0cImageMessage\x122\n\x08metadata\
    \x18\x01\x20\x01(\x0b2\x16.proto.MetadataMessageR\x08metadata\x12\x14\n\
    \x05image\x18\x02\x20\x01(\x0cR\x05image\"\\\n\x10ThumbnailMessage\x122\
    \n\x08metadata\x18\x01\x20\x01(\x0b2\x16.proto.MetadataMessageR\x08metad\
    ata\x12\x14\n\x05image\x18\x02\x20\x01(\x0cR\x05image\"\xfd\x02\n\x07Mes\
    sage\x12\x13\n\x02id\x18\x01\x20\x01(\x05H\x01R\x02id\x88\x01\x01\x12\
    \x1d\n\x07message\x18\x02\x20\x01(\tH\x02R\x07message\x88\x01\x01\x12\
    \x19\n\x05error\x18\x03\x20\x01(\x08H\x03R\x05error\x88\x01\x01\x12/\n\
    \x04list\x18\x05\x20\x01(\x0b2\x19.proto.LibraryListMessageH\0R\x04list\
    \x122\n\x05index\x18\x06\x20\x01(\x0b2\x1a.proto.LibraryIndexMessageH\0R\
    \x05index\x124\n\x08metadata\x18\x07\x20\x01(\x0b2\x16.proto.MetadataMes\
    sageH\0R\x08metadata\x12+\n\x05image\x18\x08\x20\x01(\x0b2\x13.proto.Ima\
    geMessageH\0R\x05image\x127\n\tthumbnail\x18\t\x20\x01(\x0b2\x17.proto.T\
    humbnailMessageH\0R\tthumbnailB\x05\n\x03msgB\x05\n\x03_idB\n\n\x08_mess\
    ageB\x08\n\x06_errorJ\x85\r\n\x06\x12\x04\0\02\x01\n\x08\n\x01\x0c\x12\
    \x03\0\0\x12\n\x08\n\x01\x02\x12\x03\x02\0\x0e\n\n\n\x02\x04\0\x12\x04\
    \x04\0\x07\x01\n\n\n\x03\x04\0\x01\x12\x03\x04\x08\x16\n\x0b\n\x04\x04\0\
    \x02\0\x12\x03\x05\x02\x12\n\x0c\n\x05\x04\0\x02\0\x05\x12\x03\x05\x02\
    \x08\n\x0c\n\x05\x04\0\x02\0\x01\x12\x03\x05\t\r\n\x0c\n\x05\x04\0\x02\0\
    \x03\x12\x03\x05\x10\x11\n\x0b\n\x04\x04\0\x02\x01\x12\x03\x06\x02\x12\n\
    \x0c\n\x05\x04\0\x02\x01\x05\x12\x03\x06\x02\x08\n\x0c\n\x05\x04\0\x02\
    \x01\x01\x12\x03\x06\t\r\n\x0c\n\x05\x04\0\x02\x01\x03\x12\x03\x06\x10\
    \x11\n\n\n\x02\x04\x01\x12\x04\t\0\x0b\x01\n\n\n\x03\x04\x01\x01\x12\x03\
    \t\x08\x1a\n\x0b\n\x04\x04\x01\x02\0\x12\x03\n\x02(\n\x0c\n\x05\x04\x01\
    \x02\0\x04\x12\x03\n\x02\n\n\x0c\n\x05\x04\x01\x02\0\x06\x12\x03\n\x0b\
    \x19\n\x0c\n\x05\x04\x01\x02\0\x01\x12\x03\n\x1a#\n\x0c\n\x05\x04\x01\
    \x02\0\x03\x12\x03\n&'\n\n\n\x02\x04\x02\x12\x04\r\0\x0f\x01\n\n\n\x03\
    \x04\x02\x01\x12\x03\r\x08\x1b\n\x0b\n\x04\x04\x02\x02\0\x12\x03\x0e\x02\
    \x1c\n\x0c\n\x05\x04\x02\x02\0\x04\x12\x03\x0e\x02\n\n\x0c\n\x05\x04\x02\
    \x02\0\x05\x12\x03\x0e\x0b\x11\n\x0c\n\x05\x04\x02\x02\0\x01\x12\x03\x0e\
    \x12\x17\n\x0c\n\x05\x04\x02\x02\0\x03\x12\x03\x0e\x1a\x1b\n\n\n\x02\x04\
    \x03\x12\x04\x11\0\x1b\x01\n\n\n\x03\x04\x03\x01\x12\x03\x11\x08\x17\n\
    \x0b\n\x04\x04\x03\x02\0\x12\x03\x12\x02\x12\n\x0c\n\x05\x04\x03\x02\0\
    \x05\x12\x03\x12\x02\x08\n\x0c\n\x05\x04\x03\x02\0\x01\x12\x03\x12\t\r\n\
    \x0c\n\x05\x04\x03\x02\0\x03\x12\x03\x12\x10\x11\n\x0b\n\x04\x04\x03\x02\
    \x01\x12\x03\x13\x02\x12\n\x0c\n\x05\x04\x03\x02\x01\x05\x12\x03\x13\x02\
    \x08\n\x0c\n\x05\x04\x03\x02\x01\x01\x12\x03\x13\t\r\n\x0c\n\x05\x04\x03\
    \x02\x01\x03\x12\x03\x13\x10\x11\n\x0b\n\x04\x04\x03\x02\x02\x12\x03\x14\
    \x02\x19\n\x0c\n\x05\x04\x03\x02\x02\x05\x12\x03\x14\x02\x08\n\x0c\n\x05\
    \x04\x03\x02\x02\x01\x12\x03\x14\t\x14\n\x0c\n\x05\x04\x03\x02\x02\x03\
    \x12\x03\x14\x17\x18\n\x0b\n\x04\x04\x03\x02\x03\x12\x03\x15\x02\x13\n\
    \x0c\n\x05\x04\x03\x02\x03\x05\x12\x03\x15\x02\x07\n\x0c\n\x05\x04\x03\
    \x02\x03\x01\x12\x03\x15\x08\x0e\n\x0c\n\x05\x04\x03\x02\x03\x03\x12\x03\
    \x15\x11\x12\n\x0b\n\x04\x04\x03\x02\x04\x12\x03\x16\x02\x12\n\x0c\n\x05\
    \x04\x03\x02\x04\x05\x12\x03\x16\x02\x07\n\x0c\n\x05\x04\x03\x02\x04\x01\
    \x12\x03\x16\x08\r\n\x0c\n\x05\x04\x03\x02\x04\x03\x12\x03\x16\x10\x11\n\
    \x0b\n\x04\x04\x03\x02\x05\x12\x03\x17\x02\x13\n\x0c\n\x05\x04\x03\x02\
    \x05\x05\x12\x03\x17\x02\x07\n\x0c\n\x05\x04\x03\x02\x05\x01\x12\x03\x17\
    \x08\x0e\n\x0c\n\x05\x04\x03\x02\x05\x03\x12\x03\x17\x11\x12\n\x0b\n\x04\
    \x04\x03\x02\x06\x12\x03\x18\x02\x12\n\x0c\n\x05\x04\x03\x02\x06\x05\x12\
    \x03\x18\x02\x08\n\x0c\n\x05\x04\x03\x02\x06\x01\x12\x03\x18\t\r\n\x0c\n\
    \x05\x04\x03\x02\x06\x03\x12\x03\x18\x10\x11\n\x0b\n\x04\x04\x03\x02\x07\
    \x12\x03\x19\x02\x12\n\x0c\n\x05\x04\x03\x02\x07\x05\x12\x03\x19\x02\x08\
    \n\x0c\n\x05\x04\x03\x02\x07\x01\x12\x03\x19\t\r\n\x0c\n\x05\x04\x03\x02\
    \x07\x03\x12\x03\x19\x10\x11\n\x0b\n\x04\x04\x03\x02\x08\x12\x03\x1a\x02\
    \x18\n\x0c\n\x05\x04\x03\x02\x08\x05\x12\x03\x1a\x02\x07\n\x0c\n\x05\x04\
    \x03\x02\x08\x01\x12\x03\x1a\x08\x13\n\x0c\n\x05\x04\x03\x02\x08\x03\x12\
    \x03\x1a\x16\x17\n\n\n\x02\x04\x04\x12\x04\x1d\0\x20\x01\n\n\n\x03\x04\
    \x04\x01\x12\x03\x1d\x08\x14\n\x0b\n\x04\x04\x04\x02\0\x12\x03\x1e\x02\
    \x1f\n\x0c\n\x05\x04\x04\x02\0\x06\x12\x03\x1e\x02\x11\n\x0c\n\x05\x04\
    \x04\x02\0\x01\x12\x03\x1e\x12\x1a\n\x0c\n\x05\x04\x04\x02\0\x03\x12\x03\
    \x1e\x1d\x1e\n\x0b\n\x04\x04\x04\x02\x01\x12\x03\x1f\x02\x12\n\x0c\n\x05\
    \x04\x04\x02\x01\x05\x12\x03\x1f\x02\x07\n\x0c\n\x05\x04\x04\x02\x01\x01\
    \x12\x03\x1f\x08\r\n\x0c\n\x05\x04\x04\x02\x01\x03\x12\x03\x1f\x10\x11\n\
    \n\n\x02\x04\x05\x12\x04\"\0%\x01\n\n\n\x03\x04\x05\x01\x12\x03\"\x08\
    \x18\n\x0b\n\x04\x04\x05\x02\0\x12\x03#\x02\x1f\n\x0c\n\x05\x04\x05\x02\
    \0\x06\x12\x03#\x02\x11\n\x0c\n\x05\x04\x05\x02\0\x01\x12\x03#\x12\x1a\n\
    \x0c\n\x05\x04\x05\x02\0\x03\x12\x03#\x1d\x1e\n\x0b\n\x04\x04\x05\x02\
    \x01\x12\x03$\x02\x12\n\x0c\n\x05\x04\x05\x02\x01\x05\x12\x03$\x02\x07\n\
    \x0c\n\x05\x04\x05\x02\x01\x01\x12\x03$\x08\r\n\x0c\n\x05\x04\x05\x02\
    \x01\x03\x12\x03$\x10\x11\n\n\n\x02\x04\x06\x12\x04'\02\x01\n\n\n\x03\
    \x04\x06\x01\x12\x03'\x08\x0f\n\x0b\n\x04\x04\x06\x02\0\x12\x03(\x02\x18\
    \n\x0c\n\x05\x04\x06\x02\0\x04\x12\x03(\x02\n\n\x0c\n\x05\x04\x06\x02\0\
    \x05\x12\x03(\x0b\x10\n\x0c\n\x05\x04\x06\x02\0\x01\x12\x03(\x11\x13\n\
    \x0c\n\x05\x04\x06\x02\0\x03\x12\x03(\x16\x17\n\x0b\n\x04\x04\x06\x02\
    \x01\x12\x03)\x02\x1e\n\x0c\n\x05\x04\x06\x02\x01\x04\x12\x03)\x02\n\n\
    \x0c\n\x05\x04\x06\x02\x01\x05\x12\x03)\x0b\x11\n\x0c\n\x05\x04\x06\x02\
    \x01\x01\x12\x03)\x12\x19\n\x0c\n\x05\x04\x06\x02\x01\x03\x12\x03)\x1c\
    \x1d\n\x0b\n\x04\x04\x06\x02\x02\x12\x03*\x02\x1a\n\x0c\n\x05\x04\x06\
    \x02\x02\x04\x12\x03*\x02\n\n\x0c\n\x05\x04\x06\x02\x02\x05\x12\x03*\x0b\
    \x0f\n\x0c\n\x05\x04\x06\x02\x02\x01\x12\x03*\x10\x15\n\x0c\n\x05\x04\
    \x06\x02\x02\x03\x12\x03*\x18\x19\n\x0c\n\x04\x04\x06\x08\0\x12\x04+\x02\
    1\x03\n\x0c\n\x05\x04\x06\x08\0\x01\x12\x03+\x08\x0b\n\x0b\n\x04\x04\x06\
    \x02\x03\x12\x03,\x06\"\n\x0c\n\x05\x04\x06\x02\x03\x06\x12\x03,\x06\x18\
    \n\x0c\n\x05\x04\x06\x02\x03\x01\x12\x03,\x19\x1d\n\x0c\n\x05\x04\x06\
    \x02\x03\x03\x12\x03,\x20!\n\x0b\n\x04\x04\x06\x02\x04\x12\x03-\x06$\n\
    \x0c\n\x05\x04\x06\x02\x04\x06\x12\x03-\x06\x19\n\x0c\n\x05\x04\x06\x02\
    \x04\x01\x12\x03-\x1a\x1f\n\x0c\n\x05\x04\x06\x02\x04\x03\x12\x03-\"#\n\
    \x0b\n\x04\x04\x06\x02\x05\x12\x03.\x06#\n\x0c\n\x05\x04\x06\x02\x05\x06\
    \x12\x03.\x06\x15\n\x0c\n\x05\x04\x06\x02\x05\x01\x12\x03.\x16\x1e\n\x0c\
    \n\x05\x04\x06\x02\x05\x03\x12\x03.!\"\n\x0b\n\x04\x04\x06\x02\x06\x12\
    \x03/\x06\x1d\n\x0c\n\x05\x04\x06\x02\x06\x06\x12\x03/\x06\x12\n\x0c\n\
    \x05\x04\x06\x02\x06\x01\x12\x03/\x13\x18\n\x0c\n\x05\x04\x06\x02\x06\
    \x03\x12\x03/\x1b\x1c\n\x0b\n\x04\x04\x06\x02\x07\x12\x030\x06%\n\x0c\n\
    \x05\x04\x06\x02\x07\x06\x12\x030\x06\x16\n\x0c\n\x05\x04\x06\x02\x07\
    \x01\x12\x030\x17\x20\n\x0c\n\x05\x04\x06\x02\x07\x03\x12\x030#$b\x06pro\
    to3\
";

/// `FileDescriptorProto` object which was a source for this generated file
fn file_descriptor_proto() -> &'static ::protobuf::descriptor::FileDescriptorProto {
    static file_descriptor_proto_lazy: ::protobuf::rt::Lazy<::protobuf::descriptor::FileDescriptorProto> = ::protobuf::rt::Lazy::new();
    file_descriptor_proto_lazy.get(|| {
        ::protobuf::Message::parse_from_bytes(file_descriptor_proto_data).unwrap()
    })
}

/// `FileDescriptor` object which allows dynamic access to files
pub fn file_descriptor() -> &'static ::protobuf::reflect::FileDescriptor {
    static generated_file_descriptor_lazy: ::protobuf::rt::Lazy<::protobuf::reflect::GeneratedFileDescriptor> = ::protobuf::rt::Lazy::new();
    static file_descriptor: ::protobuf::rt::Lazy<::protobuf::reflect::FileDescriptor> = ::protobuf::rt::Lazy::new();
    file_descriptor.get(|| {
        let generated_file_descriptor = generated_file_descriptor_lazy.get(|| {
            let mut deps = ::std::vec::Vec::with_capacity(0);
            let mut messages = ::std::vec::Vec::with_capacity(7);
            messages.push(LibraryMessage::generated_message_descriptor_data());
            messages.push(LibraryListMessage::generated_message_descriptor_data());
            messages.push(LibraryIndexMessage::generated_message_descriptor_data());
            messages.push(MetadataMessage::generated_message_descriptor_data());
            messages.push(ImageMessage::generated_message_descriptor_data());
            messages.push(ThumbnailMessage::generated_message_descriptor_data());
            messages.push(Message::generated_message_descriptor_data());
            let mut enums = ::std::vec::Vec::with_capacity(0);
            ::protobuf::reflect::GeneratedFileDescriptor::new_generated(
                file_descriptor_proto(),
                deps,
                messages,
                enums,
            )
        });
        ::protobuf::reflect::FileDescriptor::new_generated_2(generated_file_descriptor)
    })
}
